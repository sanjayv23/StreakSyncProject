<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Streak Sync</title>
  <style>
    :root {
      --bg-color: #f7f7f7;
      --text-color: #111;
      --container-bg: #fff;
      --button-bg: purple;
      --button-hover: purple;
      --input-border: #ccc;
    }

    [data-theme="dark"] {
      --bg-color: #121212;
      --text-color: #e0e0e0;
      --container-bg: #1e1e1e;
      --button-bg: purple;
      --button-hover: purple;
      --input-border: #555;
    }

    body {
      font-family: sans-serif;
      margin: 0;
      padding: 0;
      width: 100%;
      background-color: var(--bg-color);
      color: var(--text-color);
      transition: background 0.3s, color 0.3s;
    }

    a[role="button"] {
      display: inline-block;
      margin: 10px;
      text-decoration: none;
      background: var(--button-bg);
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      transition: background 0.3s;
    }

    a[role="button"]:hover {
      background: var(--button-hover);
    }

    .app-container {
      width: 90%;
      margin: 20px auto;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }

    .left-container, .right-container {
      padding: 20px;
      
      background: var(--container-bg);
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    .ldiv1, .ldiv2, .ldiv3 {
      margin-bottom: 20px;
    }

    .ldiv2 ul {
      list-style: none;
      padding: 0;
    }

    .task-item {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 10px;
    }

    .task-text {
      flex-grow: 1;
      font-size: 16px;
    }

    form {
      display: inline;
    }

    input[type="submit"] {
      margin-left: 5px;
      padding: 4px 10px;
      background-color: purple;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    input[type="submit"]:hover {
      background-color: purple;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid var(--input-border);
      border-radius: 6px;
      background-color: transparent;
      color: var(--text-color);
    }

    #dark-toggle {
      position: fixed;
      top: 10px;
      right: 10px;
      background-color: var(--button-bg);
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 8px;
      cursor: pointer;
      z-index: 1000;
    }

    #dark-toggle:hover {
      background-color: var(--button-hover);
    }
    .heatmap {
      display: grid;
      grid-template-rows: repeat(7, 1fr); /* 7 days in a week */
      grid-auto-flow: column;
      gap: 4px;
      justify-content: start;
    }

    .day-box {
      width: 14px;
      height: 14px;
      border-radius: 2px;
      
      background-color: #ebedf0;
      transition: background-color 0.3s;
    }

    .tooltip {
      position: absolute;
      padding: 5px 15px;
      background-color: black;
      color: white;
      font-size: 12px;
      border-radius: 3px;
      display: none;
      pointer-events: none;
      z-index: 10;

    }
    h1{
      text-align: center;
      margin-bottom: 40px;
      
    }
    #heatmap-container {
  display: flex;
  background-color: #4e4d4d;
  width: fit-content;
  padding: 20px;
  border-radius: 10px;
  margin: 30PX;
  flex-direction: column;
  align-items: start;
  gap: 6px;
}

.month-labels {
  display: grid;
  grid-template-columns: repeat(auto-fit, 1fr); /* TEMP — will override in JS */
  font-size: 12px;
  color: #000000;
  font-family: monospace;
  width: fit-content;
}


.month-label {
  margin-left: .2rem;
  
  grid-row: 1;
  text-align: center;
}
#logo{
  text-align: center;
  font-size: 40px;
  
  margin:20px
}
  </style>
</head>
<body data-theme="light">

<button id="dark-toggle">🌙  Dark Mode</button>

<a href="/logout" role="button">Log Out</a>
<h1 id="logo"> STREAK SYNC </h1>
<div class="app-container">

  <!-- Left Side -->
  <div class="left-container">
    <div class="ldiv1">
      <h2>All My Tasks</h2>
    </div>

    <div class="ldiv2">
      <h3>TODAY - <%= date %></h3>
      <ul id="task-list">
        <% for (let i = 0; i < task.length; i++) { %>
          <li class="task-item">
            <span class="task-text"><%= task[i].task %></span>

            <form action="/delete-task" method="post">
              <input type="hidden" name="task_id" value="<%= task[i].task_id %>">
              <input type="submit" value="🗑️">
            </form>

            <form action="/complete-task" method="post">
              <input type="hidden" name="task_id" value="<%= task[i].task_id %>">
              <input type="hidden" name="task" value="<%= task[i].task %>">
              <input type="submit" value="✅">
            </form>
          </li>
        <% } %>
      </ul>
    </div>

    <div class="ldiv3">
      <form action="/task" method="post">
        <input type="text" placeholder=" + Add task" id="t_name" name="t_name" required>
        <input type="submit" value="Add Task">
      </form>

      <form action="/delete-today" method="post" style="margin-top:20px;">
        <input type="submit" value="Delete All">
      </form>
    </div>
  </div>

  <!-- Right Side -->
  <div class="right-container">
    <h2>Task Completed</h2>

    <form action="/delete-complete" method="post">
      <input type="submit" value="Reset Completed">
    </form>

    <ul>
      <% for (let i = 0; i < complete.length; i++) { %>
        <li><%= complete[i].task %></li>
      <% } %>
    </ul>

    <h3>Completed Percentage</h3>
    <h2><%= percent %>%</h2>

    <a role="button" href="/app/history">📆 View Your History</a>
  </div>
</div>

<h1>Your Streak </h1>
  <div id="heatmap-container">
    <div class="month-labels" id="month-labels"></div>
    <div class="heatmap" id="heatmap"></div>
  </div>

<div class="tooltip" id="tooltip"></div>

<script>
  const toggle = document.getElementById("dark-toggle");
  const body = document.body;

  function applyTheme(theme) {
    body.setAttribute("data-theme", theme);
    toggle.textContent = theme === "dark" ? "☀️ Light Mode" : "🌙 Dark Mode";
    localStorage.setItem("theme", theme);
  }

  toggle.addEventListener("click", () => {
    const current = body.getAttribute("data-theme");
    const next = current === "dark" ? "light" : "dark";
    applyTheme(next);
  });

  // Load saved theme
  const savedTheme = localStorage.getItem("theme") || "light";
  applyTheme(savedTheme);

  const streakData = JSON.parse('<%- JSON.stringify(streak) %>');
  const dataMap = {};
  streakData.forEach(entry => {
    dataMap[entry.date] = entry.percentage;
  });

  function getColor(percentage) {
    if (percentage >= 90) return "#216e39";
    if (percentage >= 60) return "#30a14e";
    if (percentage >= 30) return "#40c463";
    if (percentage > 0) return "#9be9a8";
    return "#ebedf0"; // no progress
  }

  function getPastDates(monthsBack = 6) {
    const dates = [];
    const today = new Date();
    const start = new Date(today);
    start.setDate(1); // Start from first of the month
    start.setMonth(today.getMonth() - monthsBack);

    for (let d = new Date(start); d <= today; d.setDate(d.getDate() + 1)) {
      const iso = d.toISOString().split('T')[0];
      dates.push(iso);
    }
    return dates;
  }

  const dates = getPastDates();
  const heatmap = document.getElementById("heatmap");
  const labelRow = document.getElementById("month-labels");
  const tooltip = document.getElementById("tooltip");

  let prevMonth = -1;
  let currentWeek = -1;
  // 🔥 Count total weeks to set correct grid columns in labelRow
let totalWeeks = 0;
let weekTracker = -1;
dates.forEach((date, i) => {
  const d = new Date(date);
  const day = d.getDay();
  if (day === 0 || i === 0) weekTracker++;
});
totalWeeks = weekTracker + 1;

// 👇 Set labelRow grid to match total week columns
labelRow.style.display = "grid";
labelRow.style.gridTemplateColumns = `repeat(${totalWeeks}, 1fr)`;

  dates.forEach((date, i) => {
  const d = new Date(date);
  const day = d.getDay();
  const month = d.getMonth();
   const monthName = d.toLocaleString("default", { month: "short" });
  // Track week column
  console.log("jul 01: " + monthName);
  if (day === 0 || i === 0) currentWeek++;

  // If new month and not the first date, insert spacer
  if (month !== prevMonth && i !== 0) {
    const spacer = document.createElement("div");
    spacer.style.width = "6px";
    spacer.style.gridRow = "span 7";
    heatmap.appendChild(spacer);
  }

  // Month label
  if (month !== prevMonth) {
    // const label = document.createElement("div");
    // label.className = "month-label";
    // label.style.gridColumnStart = currentWeek + 1;
    // label.textContent =monthName;
    // labelRow.appendChild(label);
    const label = document.createElement("div");
    label.className = "month-label";
    label.style.gridColumn = `${currentWeek + 1}`;
    label.textContent = monthName;
    labelRow.appendChild(label);
  
  }

  // Day box
  const box = document.createElement("div");
  box.className = "day-box";
  box.style.backgroundColor = getColor(dataMap[date] || 0);

  // Tooltip
  box.addEventListener("mouseenter", (e) => {
    tooltip.textContent = `${date} - ${dataMap[date] || 0}% complete`;
    tooltip.style.left = e.pageX + 10 + "px";
    tooltip.style.top = e.pageY + "px";
    tooltip.style.display = "block";
  });

  box.addEventListener("mousemove", (e) => {
    tooltip.style.left = e.pageX + 10 + "px";
    tooltip.style.top = e.pageY + "px";
  });

  box.addEventListener("mouseleave", () => {
    tooltip.style.display = "none";
  });

  heatmap.appendChild(box);

  // Now update prevMonth
  prevMonth = month;
});
</script>

</body>
</html>